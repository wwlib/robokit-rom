{"version":3,"sources":["webpack://robokit-rom/webpack/universalModuleDefinition","webpack://robokit-rom/webpack/bootstrap","webpack://robokit-rom/./src/rom/RomCommand.ts","webpack://robokit-rom/./src/index.ts","webpack://robokit-rom/./src/sum.ts","webpack://robokit-rom/./src/rom/RomCommands.ts"],"names":["root","factory","exports","module","define","amd","self","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","type","data","initWithData","sum","RomCommand","RomCommands","a","b","commandList","commandMap","Map","dataList","forEach","command","push","set","json","names","commandCopy","assign","commandName","existingCommand","commandToRemove","console","log","tempCommandList","tempCommandMap"],"mappings":"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","file":"index.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"robokit-rom\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"robokit-rom\"] = factory();\n\telse\n\t\troot[\"robokit-rom\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","export interface RomCommandData {\n    name: string;\n    type: string;\n    data: any;\n}\n\n// { \"name\": \"Anim: Celebrate_01\", \"type\": \"animation\", \"data\": { \"file\": \"Celebrate_01.keys\"} }\n\nexport default class RomCommand {\n\n    public name: string = '';\n    public type: string = '';\n    public data: any;\n\n    constructor(name?: string, type?: string, data?: any) {\n        this.initWithData({\n            name: name || '',\n            type: type || '',\n            data: data\n        })\n    }\n\n    initWithData(data: RomCommandData): void {\n        this.name = data.name;\n        this.type = data.type;\n        this.data = data.data;\n    }\n\n    get json(): RomCommandData {\n        let json: RomCommandData = {\n            name: this.name,\n            type: this.type,\n            data: this.data\n        };\n        return json;\n    }\n}\n","import { sum } from './sum';\nimport IRomApp from './rom/IRomApp';\nimport RomCommand, { RomCommandData } from './rom/RomCommand';\nimport RomCommands from './rom/RomCommands';\n\nexport {\n    sum,\n    IRomApp,\n    RomCommand,\n    RomCommandData,\n    RomCommands\n}","// Temp\n\nexport function sum(a: number, b: number) {\n    return a + b;\n}\n","import RomCommand from './RomCommand';\n\nexport default class RomCommands {\n\n    public commandList: RomCommand[];\n    public commandMap: Map<string, RomCommand>;\n\n    constructor() {\n        this.commandList = [];\n        this.commandMap = new Map<string, RomCommand>();\n    }\n\n    initWithData(dataList: any[]): void {\n        dataList.forEach((data: any) => {\n            let command: RomCommand = new RomCommand();\n            command.initWithData(data);\n            this.commandList.push(command);\n            this.commandMap.set(command.name, command);\n        })\n    }\n\n    get json(): any {\n        let json: any[] = [];\n        this.commandList.forEach(command => {\n            json.push(command.json);\n        });\n        return json;\n    }\n\n    get commandNames(): string[] {\n        let names: string[] = [];\n        this.commandList.forEach(command => {\n            names.push(command.name);\n        });\n        return names;\n    }\n\n    getCommandWithName(name: string): RomCommand | undefined {\n        let command: RomCommand | undefined = this.commandMap.get(name);\n        let commandCopy: RomCommand | undefined;\n        if (command) {\n            commandCopy = new RomCommand(command.name, command.type, Object.assign({}, command.data));\n        }\n        return commandCopy;\n    }\n\n    addCommand(command: RomCommand): void {\n        this.commandList.push(command);\n        this.commandMap.set(command.name, command);\n    }\n\n    updateCommandWithName(commandName: string, command: RomCommand): void {\n        let existingCommand: RomCommand | undefined = this.commandMap.get(command.name);\n        if (existingCommand) {\n            existingCommand.data = command.data;\n            existingCommand.type = command.type;\n        }\n    }\n\n    removeCommand(commandToRemove: RomCommand): void {\n        console.log(`RomCommands: removeCommand: ${commandToRemove.name}`);\n        let tempCommandList: RomCommand[] = [];\n        let tempCommandMap: Map<string, RomCommand> = new Map<string, RomCommand>();\n        this.commandList.forEach(command => {\n            if (command.name != commandToRemove.name) {\n                tempCommandList.push(command);\n                tempCommandMap.set(command.name, command);\n            }\n        });\n\n        this.commandList = tempCommandList;\n        this.commandMap = tempCommandMap;\n    }\n}\n"],"sourceRoot":""}