!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define("robokit-rom",[],e):"object"==typeof exports?exports["robokit-rom"]=e():t["robokit-rom"]=e()}("undefined"!=typeof self?self:this,(function(){return function(t){var e={};function n(o){if(e[o])return e[o].exports;var a=e[o]={i:o,l:!1,exports:{}};return t[o].call(a.exports,a,a.exports,n),a.l=!0,a.exports}return n.m=t,n.c=e,n.d=function(t,e,o){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:o})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var a in t)n.d(o,a,function(e){return t[e]}.bind(null,a));return o},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=1)}([function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.default=class{constructor(t,e,n){this.name="",this.type="",this.initWithData({name:t||"",type:e||"",data:n})}initWithData(t){this.name=t.name,this.type=t.type,this.data=t.data}get json(){return{name:this.name,type:this.type,data:this.data}}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const o=n(2);e.sum=o.sum;const a=n(0);e.RomCommand=a.default;const r=n(3);e.RomCommands=r.default},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.sum=function(t,e){return t+e}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const o=n(0);e.default=class{constructor(){this.commandList=[],this.commandMap=new Map}initWithData(t){t.forEach(t=>{let e=new o.default;e.initWithData(t),this.commandList.push(e),this.commandMap.set(e.name,e)})}get json(){let t=[];return this.commandList.forEach(e=>{t.push(e.json)}),t}get commandNames(){let t=[];return this.commandList.forEach(e=>{t.push(e.name)}),t}getCommandWithName(t){let e,n=this.commandMap.get(t);return n&&(e=new o.default(n.name,n.type,Object.assign({},n.data))),e}addCommand(t){this.commandList.push(t),this.commandMap.set(t.name,t)}updateCommandWithName(t,e){let n=this.commandMap.get(e.name);n&&(n.data=e.data,n.type=e.type)}removeCommand(t){console.log(`RomCommands: removeCommand: ${t.name}`);let e=[],n=new Map;this.commandList.forEach(o=>{o.name!=t.name&&(e.push(o),n.set(o.name,o))}),this.commandList=e,this.commandMap=n}}}])}));
//# sourceMappingURL=index.js.map